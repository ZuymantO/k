// Copyright (c) 2012-2014 K Team. All Rights Reserved.

require "/modules/k-visitor.k"

module QUOTE-UNQUOTE-SYNTAX
  syntax Exp ::= "quote" Exp    [quote, klabel(quote)]
  syntax Exp ::= "unquote" Exp  [unquote, klabel(unquote)]
  syntax Exp ::= "lift" Exp     [lift, strict, klabel(lift)]
  syntax Exp ::= "eval" Exp     [eval, strict, klabel(eval)]
endmodule

module QUOTE-UNQUOTE
  imports QUOTE-UNQUOTE-SYNTAX
  imports K-VISITOR

  syntax KItem ::= "qVisitor" "(" Int ")" [klabel(qVisitor)]

  rule qVisitor(N:Int) => #visitor(#klabel(quoteit),#klist(N),
                                   #klabel(isQuoted),#klist(.KList)) requires #token("true", "Bool") ensures #token("true", "Bool") [macro]

  syntax Exp ::= "mQuote" "(" K "," Int ")" [klabel(mQuote)]
  rule mQuote(E, N) => #visit(E, qVisitor(N)) requires #token("true", "Bool") ensures #token("true", "Bool") [macro]

  syntax KItem ::= "quoteit" "(" Int "," K ")" [klabel(quoteit)] 
  rule `quote_`(E) => mQuote(E, #token("0", "Int")) requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]
  rule quoteit(N, `quote_`(E))   => #visiting.kapp(#klabel(`quote_`),mQuote(E, `_+Int_`(N, #token("1", "Int")))) 
    requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]
  rule quoteit(0, `unquote_`(E)) => E requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]
  rule quoteit(N, `unquote_`(E)) => #visiting.kapp(#klabel(`unquote_`),mQuote(E, `_-Int_`(N, #token("1", "Int"))))
    requires `_>Int_`(N, #token("0", "Int")) ensures #token("true", "Bool") [.::KList]

  rule lift_(V:Val) => #visited(V) requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]
  rule eval_(#visited(E)) => E requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]

  rule isVal(#visited(_)) => #token("true", "Bool") requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]

  syntax Bool ::= "isQuoted" "(" Exp ")"     [ klabel(isQuoted), function]
  rule isQuoted(`quote_`(E)) => #token("true", "Bool") requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]
  rule isQuoted(`unquote_`(K)) => #token("true", "Bool") requires #token("true", "Bool") ensures #token("true", "Bool") [.::KList]

endmodule
