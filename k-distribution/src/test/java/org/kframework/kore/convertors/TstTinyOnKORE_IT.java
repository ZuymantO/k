// Copyright (c) 2014-2015 K Team. All Rights Reserved.

package org.kframework.kore.convertors;

import junit.framework.Assert;
import org.junit.Test;
import org.junit.rules.TestName;
import org.kframework.Rewriter;
import org.kframework.attributes.Source;
import org.kframework.builtin.Sorts;
import org.kframework.definition.Module;
import org.kframework.kompile.CompiledDefinition;
import org.kframework.kompile.Kompile;
import org.kframework.kompile.KompileOptions;
import org.kframework.kore.K;
import org.kframework.main.GlobalOptions;
import org.kframework.tiny.FullTinyRewriter;
import org.kframework.utils.errorsystem.KExceptionManager;
import org.kframework.utils.file.FileUtil;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.function.BiFunction;


public class TstTinyOnKORE_IT {

    @org.junit.Rule
    public TestName name = new TestName();


    protected File testResource(String baseName) throws URISyntaxException {
        return new File(TstTinyOnKORE_IT.class.getResource(baseName).toURI());
    }

    @Test
    public void kore_imp_tiny() throws IOException, URISyntaxException {
        executeTest("TEST", "TEST-PROGRAMS",
                "<top><k> while(0<=n) { s = s + n; n = n + -1; } </k><state>n|->10 s|->0</state></top>");
    }

    @Test
    public void imp_lesson1() throws IOException, URISyntaxException {
        executeTest("IMP", "IMP-SYNTAX",
                "initKCell(`_|->_`($PGM, while(0<=n) { s = s + n; n = n + -1; }))");
    }

    private void executeTest(String mainModule, String mainSyntaxModule, String programText) throws URISyntaxException {
        String filename = "/convertor-tests/" + name.getMethodName() + ".k";

        File definitionFile = testResource(filename);
        KExceptionManager kem = new KExceptionManager(new GlobalOptions());
        try {
            CompiledDefinition compiledDef = new Kompile(new KompileOptions(), FileUtil.testFileUtil(), kem, false).run(definitionFile, mainModule, mainSyntaxModule, Sorts.K());

            Module module = compiledDef.executionModule();
            BiFunction<String, Source, K> programParser = compiledDef.getProgramParser(kem);
            Rewriter rewriter = new FullTinyRewriter(module);


            K program = programParser.apply(programText, Source.apply("generated by " + getClass().getSimpleName()));

            long l = System.nanoTime();
            K result = rewriter.execute(program);
            System.out.println("time = " + (System.nanoTime() - l) / 1000000);

            System.out.println("result = " + result.toString());

            Assert.assertEquals("<top>(<k>(#KSequence()),<state>(_Map_(_|->_(n:Id,-1),_|->_(s:Id,55))))", result.toString());
        } finally {
            kem.print();
        }
    }

}
